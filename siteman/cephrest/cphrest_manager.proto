syntax = "proto3";

option go_package = "pkg/proto";
package cphrest_manager.v1;

import "google/protobuf/empty.proto";

service CphRestManager {
  rpc GetSiteName (google.protobuf.Empty) returns (GetSiteNameResponse) {}
  // list all keys https://docs.ceph.com/en/latest/rados/operations/user-management/
  // `ceph auth auth ls`
  rpc ListKeys (google.protobuf.Empty) returns (ListKeyResponse) {}
  // get or create key see https://docs.ceph.com/en/latest/rados/operations/user-management/
  // `ceph auth get-or-create-key`
  rpc CreateKey (CreateKeyRequest) returns (CreateKeyResponse) {}
  // delete user for given key see https://docs.ceph.com/en/latest/rados/operations/user-management/
  // `ceph auth del`
  rpc DeleteKey (DeleteKeyRequest) returns (Status) {}
}

message CreateKeyRequest {
	// for example gatekeeper
	string entity = 1;
	// When creating client users, you may create a user with no capabilities. 
    // A user with no capabilities is useless beyond mere authentication, because the 
    // client cannot retrieve the cluster map from the monitor. However, you can create 
    // a user with no capabilities if you wish to defer adding capabilities later using the 
    // ceph auth caps command.
    // A typical user has at least read capabilities on the Ceph monitor and read and write c
    // apability on Ceph OSDs. Additionally, a userâ€™s OSD permissions are often restricted to 
    // accessing a particular pool.
	// {'mon': 'allow r', 'osd': 'allow rw pool=liverpool'}
	map<string, string> caps = 2;
}
message DeleteKeyRequest {
	// for example gatekeeper
	string entity = 1;
}

message GetSiteNameResponse {
	string site_name = 1;
}

message CephRestfulKey {
	// for example gatekeeper
	string entity = 1;
	// key for given entity
	string key = 2;
	// see S3CreateKeyRequest doc
	map<string, string> caps = 3;
}

message Status {
	string message = 1;
	string description = 2;
	uint32 status = 3;
}

message ListKeyResponse {
	repeated CephRestfulKey keys = 1;
	Status status = 2;
}

message CreateKeyResponse {
	CephRestfulKey key = 1;
	Status status = 2;
}
