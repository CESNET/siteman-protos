syntax = "proto3";

option go_package = "pkg/proto";
package rgw_manager.v1;

import "google/protobuf/empty.proto";

// The greeting service definition.
service RGWManager {
  // Get site name only - use for health
  rpc GetSiteName (google.protobuf.Empty) returns (GetSiteNameResponse) {}
  // get S3 account via condition specified as parameter
  rpc GetS3Account (AccountCondition) returns (S3GetAccountResponse) {}
  // scan all accounts
  rpc GetS3Accounts (google.protobuf.Empty) returns (S3GetAccountsResponse) {}
  // create personal account specified in S3CreateAccountRequest
  // By default, a S3 key pair will be created automatically and returned in the response.
  // If only one of access-key or secret-key is provided, the omitted key will be automatically
  // generated. By default, a generated key is added to the keyring without replacing an 
  // existing key pair. If access-key is specified and refers to an existing key owned by the 
  // user then it will be modified.
  rpc CreateS3PersonalAccount (S3CreateAccountRequest) returns (S3CreateAccountResponse) {}
  // just suspend given account
  rpc SuspendS3Account (AccountCondition) returns (Status) {}
  // REMOVE given account
  // NOTE: Does not require owner to be non-suspended.
  rpc RemoveS3Account (RemoveCondition) returns (Status) {}
  // KeyCreate - Create a key
  //
  // Create a new key. If a subuser is specified then by default created keys will
  // be swift type. If only one of access-key or secret-key is provided the committed
  // key will be automatically generated, that is if only SecretKey is specified then
  // AccessKey will be automatically generated. By default, a generated key is added
  // to the keyring without replacing an existing key pair. If access-key is specified
  // and refers to an existing key owned by the user then it will be modified.
  // The response is a container listing all keys of the same type as the key created.
  // Note that when creating a swift key, specifying the option AccessKey will have no
  // effect. Additionally, only one swift key may be held by each user or subuser.
  rpc CreateS3Key (S3KeyRequest) returns (S3KeyResponse) {}
  // RemoveS3Key - delete an existing key.
  // for removing key via this method S3KeyRequest has to be filled
  //
  // Key type is optional, but required to remove a swift key.
  rpc RemoveS3Key (S3KeyRequest) returns (Status) {}

  // QuotaSet - set quota for user
  rpc QuotaSet (QuotaSetRequest) returns (Status) {}

  // QuotaGet - get quata for user
  rpc QuotaGet (QuoteGetRequest) returns (QuoteGet) {}

  // QuotaSet - set quota for user
  rpc SetPlacement (PlacementSetRequest) returns (Status) {}
}

message S3Key {
	string user = 1;
	string access_key = 2;
	string secret_key = 3;
}

message S3Account {
	// A tenant may either be specified as a part of uid or as an additional request param.
	string tenant = 1;
	// The user identificator for which the information is requested.
	string uid = 2;
	// Display name
	string display_name = 3;
	// email link to this account
	string email = 4;
	// If only one of access-key or secret-key is provided, the omitted key will be automatically
    // generated. By default, a generated key is added to the keyring without replacing an 
    // existing key pair. If access-key is specified and refers to an existing key owned by the 
    // user then it will be modified.
	repeated S3Key keys = 5;
	/// A Ceph Object Gateway user can override the zonegroup’s default placement target by
	/// setting a non-empty default_placement field in the user info. 
	string placement = 6;
	/// Similarly, the default_storage_class can override the STANDARD storage class applied to objects by default.
	string storage_class = 7;
}
message SubUser {
	string id = 1;
	string permissions = 2;
}

message UserStats {
	uint32 size  = 1;
	uint32 size_actual = 2;
	uint32 size_utilized = 3;
	uint32 size_kb = 4;
	uint32 size_kb_actual = 5;
	uint32 size_kb_utilized = 6;
	uint32 num_objects = 7;
}
// UserCap - capabilities / permissions. 
// Note - capabilities are additive.  This will only ever make a user's permissions
// more permissive.  As an example, if the user has metadata permission of *, calling
// this with metadata set to read will have no effect.  On the other hand, if a user's
// permission was read, and CapsAdd was called with write, the new effective permission
// would be read + write (*).  To remove permissions, you must call CapsRm(), which is
// subtractive.
message UserCap {
	string type = 1; 
	string permission = 2; 
}

message UserInfo {
	string tenant = 1;
	string uid = 2;
	string display_name = 3;
	string email = 4;
	bool suspended = 5;
	uint32 max_buckets = 6;
	repeated SubUser sub_users = 7;
	repeated UserCap caps = 8;
	UserStats stats = 9;
	repeated string access_keys = 10;
	/// A Ceph Object Gateway user can override the zonegroup’s default placement target by
	/// setting a non-empty default_placement field in the user info. 
	string placement = 11;
	/// Similarly, the default_storage_class can override the STANDARD storage class applied to objects by default.
	string storage_class = 12;
}

/* Request Types */
message S3CreateAccountRequest {
	S3Account account = 1;
}
message RemoveCondition {
	string uid = 1;
	string tenant = 3;
	bool purge_data = 2;
}
message AccountCondition {
	string uid = 1;
	string tenant = 2;
}
/* Response Types */
message GetSiteNameResponse {
	string site_name = 1;
}
message S3GetAccountsResponse {
	repeated string accounts = 1;
	Status status = 2;
}
message Status {
	string message = 1;
	string description = 2;
	uint32 status = 3;
}
message S3CreateAccountResponse {
	S3Account account = 1;
	Status status = 2;
}

message S3GetAccountResponse {
	UserInfo account = 1;
	Status status = 2;
}
message S3KeyRequest {
	string uid = 1;
	string tenant = 4;
	// key type is swift OR s3 if is something else 
	// will be replaced as s3
	string key_type = 2;
	string access_key = 3;

}

message S3KeyResponse {
	Status status = 1;
	repeated S3Key keys = 2;
}
message QuotaMeta {
	int64 max_object = 2;
	int64 max_size_kb = 3;
	bool enabled = 5;
}
message QuotaSetRequest {
	string uid = 1;
	string tenant = 2;
	QuotaMeta user = 3;
	QuotaMeta bucket = 4;
}
message PlacementSetRequest {
	string uid = 1;
	string tenant = 2;
	string placement = 3;
	string storage_class = 4;
}
message QuoteGet {
	QuotaMeta user = 1;
	QuotaMeta bucket = 2;
}

message QuoteGetRequest {
	string uid = 1;
}
